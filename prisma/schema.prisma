// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  heroImage        String?
  bio              String?
  slug             String?    @unique
  accounts         Account[]
  sessions         Session[]
  tweets           Tweet[]
  likes            Like[]
  replies          Reply[]
  followers        Follows[]  @relation("follower")
  following        Follows[]  @relation("following")
  sentMessages     Messages[] @relation("sender")
  receivedMessages Messages[] @relation("receiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  replies   Reply[]
}

model Messages {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Reply {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Follows {
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("follower", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}
